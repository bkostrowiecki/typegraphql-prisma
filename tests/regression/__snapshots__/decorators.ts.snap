// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`decorators on field should generate decorator on field: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  @TypeGraphQL.Authorized('admin')
  intIdField!: number;
}
"
`;

exports[`decorators on model should generate decorator on model with one argument admin: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized(['admin'])
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;

exports[`decorators on model should generate decorator on model with two arguments admin and participant: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized('admin', 'participant')
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;

exports[`decorators on model should generate decorator on model: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized('admin')
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;

exports[`decorators should generate decorator on model with one argument admin: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized(['admin'])
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;

exports[`decorators should generate decorator on model with one argument as an array: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized(admin, participant)
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;

exports[`decorators should generate decorator on model with two arguments admin and participant: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized('admin', 'participant')
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;

exports[`decorators should generate decorator on model: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType(\\"User\\", {})
@TypeGraphQL.Authorized('admin')
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;
}
"
`;
